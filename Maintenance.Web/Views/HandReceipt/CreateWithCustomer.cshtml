@model CreateHandReceiptDto
@{
    ViewData["Title"] = Messages.HandReceipts;
}

<div class="card card-custom">
    <div class="card-header flex-wrap border-0 pt-6 pb-0">
        <div class="card-title">
            <h3 class="card-label">
                @string.Format(Messages.CreateTitle, Messages.HandReceipt)
                <span class="d-block text-muted pt-2 font-size-sm">@Messages.FillRequiredData</span>
            </h3>
        </div>
    </div>
    <div class="card-body">
        <div class="mb-7">
            @if (ViewBag.IsFormValid != null && !ViewBag.IsFormValid)
            {
                <div class="alert alert-danger" role="alert">
                    @Messages.FillRequiredData
                </div>
            }
            <form id="CreateHandReceiptForm" asp-action="CreateWithCustomer" method="post" enctype="multipart/form-data">
                 <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>@Messages.CustomerFullName</label>
                            <input asp-for="CustomerInfo.Name" placeholder="@string.Format(Messages.Enter,Messages.CustomerFullName)" class="form-control form-control-solid" />
                            <span asp-validation-for="CustomerInfo.Name" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>@Messages.CustomerPhoneNumber</label>
                            <input asp-for="CustomerInfo.PhoneNumber" placeholder="@string.Format(Messages.Enter,Messages.CustomerPhoneNumber)" class="form-control form-control-solid" />
                            <span asp-validation-for="CustomerInfo.PhoneNumber" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label>@Messages.HandReceiptItems</label>
                        </div>
                    </div>
                    <div class="col-md-9 text-right">
                        <!--begin::Button-->
                        <button type="button" class="btn btn-primary font-weight-bolder mr-2" data-toggle="modal" data-target="#AddItemModal">
                            <span class="svg-icon svg-icon-md">
                                <!--begin::Svg Icon | path:assets/media/svg/icons/Design/Flatten.svg-->
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                        <rect x="0" y="0" width="24" height="24" />
                                        <circle fill="#000000" cx="9" cy="15" r="6" />
                                        <path d="M8.8012943,7.00241953 C9.83837775,5.20768121 11.7781543,4 14,4 C17.3137085,4 20,6.6862915 20,10 C20,12.2218457 18.7923188,14.1616223 16.9975805,15.1987057 C16.9991904,15.1326658 17,15.0664274 17,15 C17,10.581722 13.418278,7 9,7 C8.93357256,7 8.86733422,7.00080962 8.8012943,7.00241953 Z" fill="#000000" opacity="0.3" />
                                    </g>
                                </svg>
                                <!--end::Svg Icon-->
                            </span>@Messages.Create
                        </button>
                        <!--end::Button-->
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-md-12">
                        <div class="table-responsive">
                            <table id="ItemsTable" class="table">
                                <thead>
                                    <tr>
                                        <th scope="col">@Messages.Item</th>
                                        <th scope="col">@Messages.Company</th>
                                        <th scope="col">@Messages.Color</th>
                                        <th scope="col">@Messages.Description</th>
                                        <th scope="col">@Messages.SpecifiedCost</th>
                                        <th scope="col">@Messages.NotifyCustomerOfTheCost</th>
                                        <th scope="col">@Messages.From</th>
                                        <th scope="col">@Messages.To</th>
                                        <th scope="col">@Messages.Urgent</th>
                                        <th scope="col">@Messages.WarrantyDaysNumber</th>
                                        <th scope="col">@Messages.Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="ItemsTableBody">
                                </tbody>
                            </table>
                            <p id="AddItemsMsg">@Messages.AddItemsMsg</p>
                        </div>
                    </div>
                </div>

                <div class="modal-footer mt-10">
                    <button type="submit" class="btn btn-primary font-weight-bold mr-2">@Messages.Submit</button>
                    <a href="/HandReceipt/Index" class="btn btn-light-primary font-weight-bold">@Messages.Cancel</a>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" data-toggle="PopUp" data-target="modal" id="AddItemModal" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Messages.Create</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="AddItemForm">
                    <div class="row">
                        <div class="form-group">
                            <div class="col-md-8">
                                <label>@Messages.Item</label>
                                <select id="SelectItem" name="ItemId" class="form-control form-control-solid">
                                    <option value="">-- @string.Format(Messages.Select, Messages.Item) --</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-8">
                                <label>@Messages.Company</label>
                                <select id="SelectCompany" name="CompanyId" class="form-control form-control-solid">
                                    <option value="">-- @string.Format(Messages.Select, Messages.Company) --</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-8">
                                <label>@Messages.Color</label>
                                <select id="SelectColor" name="ColorId" class="form-control form-control-solid">
                                    <option value="">-- @string.Format(Messages.Select, Messages.Color) --</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label>@Messages.Description</label>
                                <textarea id="Description" placeholder="@string.Format(Messages.Enter,Messages.Description)" class="form-control form-control-solid"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>@Messages.SpecifiedCost</label>
                                <input type="number" id="SpecifiedCost" placeholder="@string.Format(Messages.Enter,Messages.SpecifiedCost)" class="form-control form-control-solid" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>@Messages.From</label>
                                <input type="number" id="CostFrom" placeholder="@string.Format(Messages.Enter,Messages.From)" class="form-control form-control-solid" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>@Messages.To</label>
                                <input type="number" id="CostTo" placeholder="@string.Format(Messages.Enter,Messages.To)" class="form-control form-control-solid" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label>@Messages.NotifyCustomerOfTheCost</label>
                                <input id="NotifyCustomerOfTheCost" type="checkbox" value="false" placeholder="@string.Format(Messages.Enter,Messages.NotifyCustomerOfTheCost)" class="form-control form-control-solid" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>@Messages.WarrantyDaysNumber</label>
                                <input type="number" id="WarrantyDaysNumber" placeholder="@string.Format(Messages.Enter,Messages.WarrantyDaysNumber)" class="form-control form-control-solid" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>@Messages.Urgent</label>
                                <input id="Urgent" type="checkbox" value="false" placeholder="@string.Format(Messages.Enter,Messages.Urgent)" class="form-control form-control-solid" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button id="AddItemBtn" type="button" class="btn btn-primary font-weight-bold mr-2">@Messages.Submit</button>
                        <button type="button" data-dismiss="modal" class="btn btn-light-primary font-weight-bold">@Messages.Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        PageLoadActions();

        var itemsArr = [];
        $.ajax({
            url: '/Item/List',
            dataType: "json",
            success: function(data) {
                $(data).each(function(index, value) {
                    $("#SelectItem").append($("<option></option>").val(value.id).html(value.name));
                    itemsArr.push(value);
                });
            }
        });

        var companiesArr = [];
        $.ajax({
            url: '/Company/List',
            dataType: "json",
            success: function(data) {
                $(data).each(function(index, value) {
                    $("#SelectCompany").append($("<option></option>").val(value.id).html(value.name));
                    companiesArr.push(value);
                });
            }
        });

        var colorsArr = [];
        $.ajax({
            url: '/Color/List',
            dataType: "json",
            success: function(data) {
                $(data).each(function(index, value) {
                    $("#SelectColor").append($("<option></option>").val(value.id).html(value.name));
                    colorsArr.push(value);
                });
            }
        });

        function GetDataFromModal() {
            var itemId = $('#SelectItem').val();
            var itemObj = itemsArr.find(obj => {
                return obj.id == itemId;
            });

            var companyId = $('#SelectCompany').val();
            var companyObj = companiesArr.find(obj => {
                return obj.id == companyId;
            });

            var colorId = $('#SelectColor').val();
            var colorObj = colorsArr.find(obj => {
                return obj.id == colorId;
            });

            var description = $('#Description').val();
            var specifiedCost = $('#SpecifiedCost').val();
            var costFrom = $('#CostFrom').val();
            var costTo = $('#CostTo').val();
            var warrantyDaysNumber = $('#WarrantyDaysNumber').val();
            var notifyCustomerOfTheCost = $('#NotifyCustomerOfTheCost').val();
            var urgent = $('#Urgent').val();

            var handReceiptItem =
            {
                itemId: itemId,
                item: itemObj.name,
                colorId: colorId,
                color: colorObj.name,
                companyId: companyId,
                company: companyObj.name,
                description: description,
                specifiedCost: specifiedCost,
                costFrom: costFrom,
                costTo: costTo,
                warrantyDaysNumber: warrantyDaysNumber,
                notifyCustomerOfTheCost: notifyCustomerOfTheCost,
                urgent: urgent
            }

            AddRow(handReceiptItem);
            $("#AddItemModal").modal("hide");
            $("#AddItemForm").resetForm();
            $("#Urgent").attr('value', 'false');
            $("#NotifyCustomerOfTheCost").attr('value', 'false');
        }

        function AddRow(itemObj) {
            $('#AddItemsMsg').hide();
            var newRowIndex = $('#ItemsTable > tbody > tr').length;

            var notifyCustomerOfTheCost = '';
            if (itemObj.notifyCustomerOfTheCost == 'true') {
                notifyCustomerOfTheCost = '@Messages.Yes';
            } else {
                notifyCustomerOfTheCost = '@Messages.No';
            }

            var urgent = '';
            if (itemObj.urgent == 'true') {
                urgent = '@Messages.Yes';
            } else {
                urgent = '@Messages.No';
            }

            row = '';
            row += '<tr class="item-row">';
            row += '<td>' + itemObj.item + '<input type="hidden" name="Items[' + newRowIndex + '].ItemId" value="' + itemObj.itemId + '" class="item"></td>';
            row += '<td>' + itemObj.company + '<input type="hidden" name="Items[' + newRowIndex + '].CompanyId" value="' + itemObj.companyId + '" class="company"></td>';
            row += '<td>' + itemObj.color + '<input type="hidden" name="Items[' + newRowIndex + '].ColorId" value="' + itemObj.colorId + '" class="color"></td>';
            row += '<td>' + itemObj.description + '<input type="hidden" name="Items[' + newRowIndex + '].Description" value="' + itemObj.description + '" class="description"></td>';
            row += '<td>' + itemObj.specifiedCost + '<input type="hidden" name="Items[' + newRowIndex + '].SpecifiedCost" value="' + itemObj.specifiedCost + '" class="specified-cost"';
            row += ' min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"></td>';
            row += '<td>' + notifyCustomerOfTheCost + '<input type="hidden" name="Items[' + newRowIndex + '].NotifyCustomerOfTheCost" value="' + itemObj.notifyCustomerOfTheCost + '" class="notify-customer"></td>';
            row += '<td>' + itemObj.costFrom + '<input type="hidden" name="Items[' + newRowIndex + '].CostFrom" value="' + itemObj.costFrom + '" class="cost-from"';
            row += ' min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"></td>';
            row += '<td>' + itemObj.costTo + '<input type="hidden" name="Items[' + newRowIndex + '].CostTo" value="' + itemObj.costTo + '" class="cost-to"';
            row += ' min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))"></td>';
            row += '<td>' + urgent + '<input type="hidden" name="Items[' + newRowIndex + '].Urgent" value="' + itemObj.urgent + '" class="urgent"></td>';
            row += '<td>' + itemObj.warrantyDaysNumber + '<input type="hidden" name="Items[' + newRowIndex + '].WarrantyDaysNumber" value="' + itemObj.warrantyDaysNumber + '" class="warranty-expiry-date"></td>';
            row += '<td><button type="button" class="btn btn-danger font-weight-bold delete-row delete-row-' + newRowIndex + '">@Messages.Delete</button></td>';
            row += '</tr>';

            $("#ItemsTableBody").append(row);

            $(".delete-row").click(function() {
                var rowCount = $('#ItemsTable > tbody > tr').length;
                $(this).closest("tr").remove();
                if (rowCount == 1) {
                    $('#AddItemsMsg').show();
                }
            });
        }

        $(":checkbox").on('change', function() {
            if ($(this).is(':checked')) {
                $(this).attr('value', 'true');
            } else {
                $(this).attr('value', 'false');
            }
        });

        // Class definition
        var KTFormControls = function() {
            // Private functions
            var _initDemo1 = function() {
                var validator = FormValidation.formValidation(
                    document.getElementById('AddItemForm'),
                    {
                        fields: {
                            ItemId: {
                                validators: {
                                    notEmpty: {
                                        message: '@string.Format(Messages.RequiredField, Messages.Item)'
                                    }
                                }
                            },
                            CompanyId: {
                                validators: {
                                    notEmpty: {
                                        message: '@string.Format(Messages.RequiredField, Messages.Company)'
                                    }
                                }
                            }
                        },

                        plugins: { //Learn more: https://formvalidation.io/guide/plugins
                            trigger: new FormValidation.plugins.Trigger(),
                            // Bootstrap Framework Integration
                            bootstrap: new FormValidation.plugins.Bootstrap(),
                            // Validate fields when clicking the Submit button
                            //submitButton: new FormValidation.plugins.SubmitButton(),
                            // Submit the form when all fields are valid
                            //defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
                        }
                    }
                );

                // Submit button handler
                const addItemBtn = document.getElementById('AddItemBtn');
                addItemBtn.addEventListener('click', function(e) {
                    // Prevent default button action
                    e.preventDefault();

                    // Validate form before submit
                    if (validator) {
                        validator.validate().then(function(status) {
                            console.log('validated!');

                            if (status == 'Valid') {
                                GetDataFromModal();
                            }
                        });
                    }
                });
            }

            var _initDemo2 = function() {
                FormValidation.formValidation(
                    document.getElementById('CreateHandReceiptForm'),
                    {
                        fields: {
                            'CustomerInfo.Name': {
                                validators: {
                                    notEmpty: {
                                        message: '@string.Format(Messages.RequiredField, Messages.CustomerFullName)'
                                    }
                                }
                            },
                            'CustomerInfo.PhoneNumber': {
                                validators: {
                                    notEmpty: {
                                        message: '@string.Format(Messages.RequiredField, Messages.CustomerPhoneNumber)'
                                    }
                                }
                            }
                        },

                        plugins: { //Learn more: https://formvalidation.io/guide/plugins
                            trigger: new FormValidation.plugins.Trigger(),
                            // Bootstrap Framework Integration
                            bootstrap: new FormValidation.plugins.Bootstrap(),
                            // Validate fields when clicking the Submit button
                            submitButton: new FormValidation.plugins.SubmitButton(),
                            // Submit the form when all fields are valid
                            defaultSubmit: new FormValidation.plugins.DefaultSubmit(),
                        }
                    }
                );

                // Submit button handler
                const addItemBtn = document.getElementById('AddItemBtn');
                addItemBtn.addEventListener('click', function(e) {
                    // Prevent default button action
                    e.preventDefault();

                    // Validate form before submit
                    if (validator) {
                        validator.validate().then(function(status) {
                            console.log('validated!');

                            if (status == 'Valid') {
                                GetDataFromModal();
                            }
                        });
                    }
                });
            }

            return {
                // public functions
                init: function() {
                    _initDemo1();
                    _initDemo2();
                }
            };
        }();

        // Class definition
        var KTSelect2 = function() {
            // Private functions
            var demos = function() {
                // basic
                $('#SelectCustomer').select2();
                $('#SelectItem').select2();
                $('#SelectCompany').select2();
                $('#SelectColor').select2();
            }

            // Public functions
            return {
                init: function() {
                    demos();
                }
            };
        }();

        jQuery(document).ready(function() {
            KTFormControls.init();
            KTSelect2.init();
        });

        $('#SpecifiedCost, #CostFrom, #CostTo, #NotifyCustomerOfTheCost').change(function() {
            var specifiedCostVal = $('#SpecifiedCost').val();
            var costFromVal = $('#CostFrom').val();
            var costToVal = $('#CostTo').val();
            var notifyCustomerValToVal = $('#NotifyCustomerOfTheCost').val();

            if (specifiedCostVal) {
                $("#CostFrom").prop('disabled', true);
                $("#CostTo").prop('disabled', true);
                $("#NotifyCustomerOfTheCost").prop('disabled', true);
            } else if (costFromVal) {
                $("#SpecifiedCost").prop('disabled', true);
                $("#NotifyCustomerOfTheCost").prop('disabled', true);
            } else if (costToVal) {
                $("#SpecifiedCost").prop('disabled', true);
                $("#NotifyCustomerOfTheCost").prop('disabled', true);
            } else if (notifyCustomerValToVal == 'true') {
                $("#SpecifiedCost").prop('disabled', true);
                $("#CostFrom").prop('disabled', true);
                $("#CostTo").prop('disabled', true);
            } else {
                $("#SpecifiedCost").prop('disabled', false);
                $("#CostFrom").prop('disabled', false);
                $("#CostTo").prop('disabled', false);
                $("#NotifyCustomerOfTheCost").prop('disabled', false);
            }
        });
    </script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
}




