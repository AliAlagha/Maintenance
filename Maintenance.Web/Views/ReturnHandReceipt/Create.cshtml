@model CreateReturnHandReceiptDto
@{
    ViewData["Title"] = Messages.ReturnHandReceipts;

    var handReceiptItemsJson = JsonConvert.SerializeObject(ViewBag.HandReceiptItems);
}

<div class="card card-custom">
    <div class="card-header flex-wrap border-0 pt-6 pb-0">
        <div class="card-title">
            <h3 class="card-label">
                @string.Format(Messages.CreateTitle, Messages.ReturnHandReceipt)
                <span class="d-block text-muted pt-2 font-size-sm">@Messages.FillRequiredData</span>
            </h3>
        </div>
    </div>
    <div class="card-body">
        <div class="mb-7">
            @if (ViewBag.IsFormValid != null && !ViewBag.IsFormValid)
            {
                <div class="alert alert-danger" role="alert">
                    @Messages.FillRequiredData
                </div>
            }
            <form id="CreateForm" asp-action="Create" method="post" enctype="multipart/form-data">
                <input asp-for="HandReceiptId" type="hidden" />

                <!--begin: Datatable-->
                <div class="datatable datatable-head-custom" id="kt_datatable"></div>
                <!--end: Datatable-->

                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary font-weight-bold mr-2">@Messages.Submit</button>
                    <button href="/ReturnHandReceipt/Index" class="btn btn-light-primary font-weight-bold">@Messages.Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var handReceiptItems = JSON.parse('@Html.Raw(handReceiptItemsJson)');

        "use strict";
        // Class definition

        var KTDatatableRecordSelectionDemo = function () {
            // Private functions

            var options = {
                // datasource definition
                data: {
                    type: 'local',
                    source: handReceiptItems,
                },

                // layout definition
                layout: {
                    scroll: true, // enable/disable datatable scroll both horizontal and
                    footer: false // display/hide footer
                },
                rows: {
                    autoHide: false
                },

                // column sorting
                sortable: true,

                pagination: false,

                // columns definition
                columns: [{
                    field: 'Id',
                    title: '#',
                    sortable: false,
                    autoHide: false,
                    width: 20,
                    selector: true,
                    textAlign: 'center',
                },
                {
                    field: 'Item',
                    title: '@Messages.Item',
                    sortable: false,
                    autoHide: false,
                    width: 100
                },
                {
                    field: 'ItemBarcode',
                    title: '@Messages.Barcode',
                    sortable: false,
                    autoHide: false,
                    width: 100
                },
                {
                    field: 'Company',
                    title: '@Messages.Company',
                    sortable: false,
                    width: 100
                },
                {
                    field: 'WarrantyDaysNumber',
                    title: '@Messages.WarrantyDaysNumber',
                    sortable: false,
                    width: 100
                },
                {
                    field: 'DeliveryDate',
                    title: '@Messages.DeliveryDate',
                    sortable: false,
                    width: 100
                },
                {
                    field: 'ReturnReasonInput',
                    title: '@Messages.ReturnReason',
                    sortable: false,
                    autoHide: false,
                    width: 200,
                    template: function (data) {
                        var res = '';
                        res = res + '<input type="text" name="Items[' + data.Index + '].ReturnReason" class="form-control" />';
                        return res;
                    }
                },
                {
                    field: 'SpecifiedCostInput',
                    title: '@Messages.SpecifiedCost',
                    sortable: false,
                    autoHide: false,
                    width: 100,
                    template: function (data) {
                        var res = '';
                        res = res + '<input type="number" name="Items[' + data.Index + '].SpecifiedCost" class="form-control specified-cost index-' + data.Index + '" min="0" onkeypress="return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" />';
                        return res;
                    }
                },
                {
                    field: 'CostFromInput',
                    title: '@Messages.From',
                    sortable: false,
                    autoHide: false,
                    width: 100,
                    template: function (data) {
                        var res = '';
                        res = res + '<input type="number" name="Items[' + data.Index + '].CostFrom" class="form-control cost-from index-' + data.Index + '" min = "0" onkeypress = "return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /> ';
                        return res;
                    }
                },
                {
                    field: 'CostToInput',
                    title: '@Messages.To',
                    sortable: false,
                    autoHide: false,
                    width: 100,
                    template: function (data) {
                        var res = '';
                        res = res + '<input type="number" name="Items[' + data.Index + '].CostTo" class="form-control cost-to index-' + data.Index + '" min = "0" onkeypress = "return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))" /> ';
                        return res;
                    }
                },
                {
                    field: 'NotifyCustomerOfTheCostInput',
                    title: '@Messages.NotifyCustomerOfTheCost',
                    sortable: false,
                    autoHide: false,
                    width: 100,
                    template: function (data) {
                        var res = '';
                        res = res + '<input type="checkbox" name="Items[' + data.Index + '].NotifyCustomerOfTheCost" class="form-control notify-customer index-' + data.Index + '" />';
                        return res;
                    }
                },
                {
                    field: 'UrgentInput',
                    title: '@Messages.Urgent',
                    sortable: false,
                    autoHide: false,
                    width: 100,
                    template: function (data) {
                        var res = '';
                        res = res + '<input type="checkbox" name="Items[' + data.Index + '].Urgent" class="form-control urgent index-' + data.Index + '" />'
                        res = res + '<input type="hidden" name="Items[' + data.Index + '].HandReceiptItemId" value="' + data.Id + '" />';
                        res = res + '<input id="is-selected-' + data.Id + '" type="hidden" name="Items[' + data.Index + '].IsSelected" value="false" />';
                        return res;
                    }
                }],
            };

            // basic demo
            var localSelectorDemo = function () {
                // enable extension
                options.extensions = {
                    // boolean or object (extension options)
                    checkbox: true,
                };

                options.search = {
                    input: $('#kt_datatable_search_query'),
                    key: 'generalSearch'
                };

                var datatable = $('#kt_datatable').KTDatatable(options);

                datatable.on(
                    'datatable-on-check datatable-on-uncheck',
                    function (e) {
                        var ids = datatable.rows('.datatable-row-active').
                            nodes().
                            find('.checkbox > [type="checkbox"]').
                            map(function (i, chk) {
                                var selectedItemId = $(chk).val();
                                $('#is-selected-' + selectedItemId).val('true');
                            });
                    });
            };

            return {
                // public functions
                init: function () {
                    localSelectorDemo();
                },
            };
        }();

        jQuery(document).ready(function () {
            KTDatatableRecordSelectionDemo.init();

            $('.specified-cost, .cost-from, .cost-to, .notify-customer').change(function () {
                alert("changed");

                var classVal = $(this).attr("class");
                var indexClassIndex = classVal.indexOf("index");
                var indexClass = classVal.substring(indexClassIndex);
                var dashIndex = indexClass.indexOf("-");
                var rowIndex = indexClass.substring(dashIndex + 1);

                alert(rowIndex);

                var specifiedCostElement = '.specified-cost-' + index;
                var costFromElement = '.cost-from-' + index;
                var costToElement = '.cost-to-' + index;
                var notifyCustomerElement = '.notify-customer-' + index;

                var specifiedCostVal = $(specifiedCostElement).val();
                var costFromVal = $(costFromElement).val();
                var costToVal = $(costToElement).val();
                var notifyCustomerValToVal = $(notifyCustomerElement).val();

                if (specifiedCostVal) {
                    $(costFromElement).prop('disabled', true);
                    $(costToElement).prop('disabled', true);
                    $(notifyCustomerElement).prop('disabled', true);
                } else if (costFromElement) {
                    $(specifiedCostElement).prop('disabled', true);
                    $(notifyCustomerElement).prop('disabled', true);
                } else if (costToElement) {
                    $(specifiedCostElement).prop('disabled', true);
                    $(notifyCustomerElement).prop('disabled', true);
                } else if (notifyCustomerValToVal == 'true') {
                    $(specifiedCostElement).prop('disabled', true);
                    $(costFromElement).prop('disabled', true);
                    $(costToElement).prop('disabled', true);
                } else {
                    $(specifiedCostElement).prop('disabled', false);
                    $(costFromElement).prop('disabled', false);
                    $(costToElement).prop('disabled', false);
                    $(notifyCustomerElement).prop('disabled', false);
                }
            });
        });

    </script>

    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
}